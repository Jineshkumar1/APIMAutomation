name: Deploy APIs to Azure APIM

on:
  push:
    branches: [ develop, main ]
    paths:
      - 'apis/**/*.json'
      - 'apis/**/*.yaml'
      - 'apis/**/*.yml'
      - 'policies/**/*.xml'
  workflow_dispatch:
    inputs:
      api_name:
        description: 'Specific API to deploy (leave blank for all)'
        required: false
        type: string
      
env:
  # Set environment variables for Azure resources. 
  # These should be updated to match your Azure environment.
  AZURE_APIM_SERVICE_NAME: "apim-cms-dev-use2"
  AZURE_RESOURCE_GROUP: "rg-cms-apim-dev-use2"

jobs:
  deploy-to-apim:
    name: Deploy APIs to APIM
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository so workflow can access the code and API definitions.
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Authenticate with Azure using credentials stored in repository secrets.
      # This allows subsequent az CLI commands to interact with your Azure resources.
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Step 3: Install the APIM DevOps toolkit globally.
      # This toolkit provides helpful utilities for managing Azure API Management resources as code.
      - name: Setup APIM DevOps toolkit
        run: |
          npm install -g @azure/api-management-devops-resource-kit
          # Improvement: Consider caching npm packages to speed up workflow runs.
          
      # Step 4: Install Azure CLI extension for API Management.
      # This enables advanced APIM commands within the az CLI.
      - name: Install AzCLI Extensions
        run: |
          az extension add --name api-management
          # Improvement: Use 'az extension update' if already installed.
          
      # Step 5: Determine which APIs need to be deployed.
      # If triggered manually with an api_name, deploy only that API.
      # Otherwise, deploy all APIs that exist in the apis/ directory.
      - name: Determine APIs to deploy
        id: determine_apis
        run: |
          if [ -n "${{ github.event.inputs.api_name }}" ]; then
            # Deploying a specific API as requested by workflow_dispatch input.
            echo "Deploying specific API: ${{ github.event.inputs.api_name }}"
            echo "api_list=${{ github.event.inputs.api_name }}" >> $GITHUB_OUTPUT
          else
            # Find all unique API definitions (by file name, without extension) to deploy.
            APIS=$(find ./apis -name "*.json" -o -name "*.yaml" -o -name "*.yml" | xargs basename -s .json -s .yaml -s .yml | sort -u | tr '\n' ' ')
            echo "Deploying APIs: $APIS"
            echo "api_list=$APIS" >> $GITHUB_OUTPUT
          fi
          # Improvement: Consider filtering only APIs that actually changed in the commit (using git diff).
      
      # Step 6: Deploy each API to Azure APIM.
      # For each API, import the spec and apply policies if they exist.
      - name: Deploy APIs to APIM
        run: |
          # Loop through each API in the list and deploy it.
          for api in ${{ steps.determine_apis.outputs.api_list }}; do
            echo "Deploying API: $api"
            
            # Find the first matching API definition file (json/yaml/yml).
            api_file=$(find ./apis -name "${api}.*" | head -n 1)
            
            if [ -z "$api_file" ]; then
              echo "Error: Could not find definition file for API: $api"
              exit 1
            fi
            
            echo "Found API file: $api_file"
            
            # Extract the API version from the file. Defaults to "1.0" if not found.
            api_version=$(grep -o '"version":\s*"[^"]*"' "$api_file" | cut -d'"' -f4 || echo "1.0")
            echo "API version: $api_version"
            
            # Import or update the API in Azure API Management.
            az apim api import \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --service-name ${{ env.AZURE_APIM_SERVICE_NAME }} \
              --api-id "$api" \
              --path "/$api" \
              --display-name "$api" \
              --api-version "$api_version" \
              --specification-format "OpenApi" \
              --specification-path "$api_file"
            
            # Apply a global API policy if policy.xml exists for this API.
            if [ -f "./policies/${api}/policy.xml" ]; then
              echo "Applying API policy for $api"
              az apim api policy create \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --service-name ${{ env.AZURE_APIM_SERVICE_NAME }} \
                --api-id "$api" \
                --value "@./policies/${api}/policy.xml"
            fi
            
            # Apply operation-specific policies if they exist.
            for operation_policy in $(find ./policies/${api}/operations -name "*.xml" 2>/dev/null || echo ""); do
              if [ -f "$operation_policy" ]; then
                operation_name=$(basename "$operation_policy" .xml)
                echo "Applying operation policy for $api/$operation_name"
                az apim api operation policy create \
                  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                  --service-name ${{ env.AZURE_APIM_SERVICE_NAME }} \
                  --api-id "$api" \
                  --operation-id "$operation_name" \
                  --value "@$operation_policy"
              fi
            done
          done
          # Improvement: Add error handling/reporting if deployment fails for any API.
      
      # Step 7: Assign APIs to products if a mapping exists.
      # This uses a config file to determine which APIs belong to which products.
      - name: Assign APIs to Products
        run: |
          for api in ${{ steps.determine_apis.outputs.api_list }}; do
            # If a product mapping config exists, use jq to extract product assignments.
            if [ -f "./config/api-products.json" ]; then
              # Get products for this API (expects an array in JSON).
              products=$(jq -r --arg api "$api" '.[$api] | join(" ")' ./config/api-products.json)
              
              if [ -n "$products" ] && [ "$products" != "null" ]; then
                echo "Assigning API $api to products: $products"
                for product in $products; do
                  az apim product api add \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --service-name ${{ env.AZURE_APIM_SERVICE_NAME }} \
                    --product-id "$product" \
                    --api-id "$api"
                done
              fi
            fi
          done
          # Improvement: Log a warning if the config file is missing or malformed.
      
      # Step 8: Smoke test API endpoints to verify deployment.
      # This basic test checks if the API responds with expected HTTP status codes.
      - name: Test API Endpoints
        run: |
          # Get a subscription key for testing (assumes at least one active subscription).
          sub_key=$(az apim subscription list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --service-name ${{ env.AZURE_APIM_SERVICE_NAME }} \
            --query "[?state=='active'].primaryKey" -o tsv | head -n 1)
          
          for api in ${{ steps.determine_apis.outputs.api_list }}; do
            echo "Testing API: $api"
            
            # Make a test request to the API endpoint.
            status_code=$(curl -s -o /dev/null -w "%{http_code}" \
              "https://${{ env.AZURE_APIM_SERVICE_NAME }}.azure-api.net/$api" \
              -H "Ocp-Apim-Subscription-Key: $sub_key" \
              -H "Ocp-Apim-Trace: true")
            
            echo "API $api returned status code: $status_code"
            if [[ "$status_code" == "401" || "$status_code" == "404" || "$status_code" == "200" || "$status_code" == "403" ]]; then
              echo "API $api is accessible"
            else
              echo "Warning: API $api might have issues. Status code: $status_code"
            fi
          done
          # Improvement: Enhance testing by sending sample requests from example files or OpenAPI examples.
